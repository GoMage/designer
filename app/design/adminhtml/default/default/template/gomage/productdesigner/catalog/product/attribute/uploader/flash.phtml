<?php
/**
 * GoMage Product Designer Extension
 *
 * @category     Extension
 * @copyright    Copyright (c) 2013-2016 GoMage (https://www.gomage.com)
 * @author       GoMage
 * @license      https://www.gomage.com/license-agreement/  Single domain license
 * @terms of use https://www.gomage.com/terms-of-use/
 * @version      Release: 2.4.0
 * @since        Available since Release 2.4.0
 */

$config = new Varien_Object();
$type = 'option_image';

$config->setUrl(Mage::getModel('adminhtml/url')->addSessionParam()->getUrl('*/designer_product/uploadAttributeImage', array('type' => $type, '_secure' => true)));
$config->setParams(array('form_key' => $this->getParentBlock()->getFormKey()));
$config->setFileField($type);
$config->setFilters(array(
    'all'    => array(
        'label' => Mage::helper('adminhtml')->__('All Files'),
        'files' => array('*.*')
    )
));
$config->setReplaceBrowseWithRemove(true);
$config->setWidth('32');
$config->setHideUploadButton(true);
$json_config = Mage::helper('core')->jsonEncode($config->getData());

?>

<script type="text/javascript">
//<![CDATA[


<?php $uploader_block = new Mage_Adminhtml_Block_Media_Uploader();?>

var maxUploadFileSizeInBytes = <?php echo $uploader_block->getDataMaxSizeInBytes() ?>;
var maxUploadFileSize = '<?php echo $uploader_block->getDataMaxSize() ?>';

var uploaderTemplate = '<div class="no-display" id="[[idName]]-template">' +
                            '<div id="{{id}}" class="file-row file-row-narrow">' +
                                '<span class="file-info">' +
                                    '<span class="file-info-name">{{name}}</span>' +
                                    ' ' +
                                    '<span class="file-info-size">({{size}})</span>' +
                                '</span>' +
                                '<span class="progress-text"></span>' +
                                '<div class="clear"></div>' +
                            '</div>' +
                        '</div>' +
                            '<div class="no-display" id="[[idName]]-template-progress">' +
                            '{{percent}}% {{uploaded}} / {{total}}' +
                            '</div>';

var fileListTemplate = '<span class="file-info">' +
                            '<span class="file-info-name">{{name}}</span>' +
                            ' ' +
                            '<span class="file-info-size">({{size}})</span>' +
                        '</span>';
                        
var Downloadable = {
    uploaderObj : $H({}),
    objCount : 0,
    setUploaderObj : function(type, key, obj){
        if (!this.uploaderObj.get(type)) {
            this.uploaderObj.set(type, $H({}));
        }
        
        obj.onFileSelect	= function(){this.upload();}.bind(obj);
        obj.onFilesComplete = function(files){
        	
        	for(var i = 0; i < files.length; i++){
        		item = files[i];
        		
        		if (!item.response.isJSON()) {
	                try {
	                    console.log(item.response);
	                } catch (e2) {
	                    alert(item.response);
	                }
	               return;
	           }
	           var response = item.response.evalJSON();
	           if (response.error) {
	               return;
	           }
	           
	           var newFile = {};
	           newFile.file = response.file;
	           newFile.name = response.name;
	           newFile.size = response.size;
	           newFile.status = 'new';
        	   
        	}
        	
        	if(newFile){
        		
        		$(this.containerId+'_save').value = Object.toJSON([newFile]);
        		
        	}
        	
        }.bind(obj);
        
        this.uploaderObj.get(type).set(key, obj);
    },
    
    
    getUploaderObj : function(type, key){
        try {
            return this.uploaderObj.get(type).get(key);
        } catch (e) {
            try {
                console.log(e);
            } catch (e2) {
                alert(e.name + '\n' + e.message);
            }
        }
    },
    unsetUploaderObj : function(type, key){
        try {
            this.uploaderObj.get(type).unset(key);
        } catch (e) {
            try {
                console.log(e);
            } catch (e2) {
                alert(e.name + '\n' + e.message);
            }
        }
    },
    massUploadByType : function(type){
        try {
            this.uploaderObj.get(type).each(function(item){
                container = item.value.container.up('tr');
                if (container.visible() && !container.hasClassName('no-display')) {
                    item.value.upload();
                } else {
                    Downloadable.unsetUploaderObj(type, item.key);
                }
            });
        } catch (e) {
            try {
                console.log(e);
            } catch (e2) {
                alert(e.name + '\n' + e.message);
            }
        }
    }
};
Downloadable.FileUploader = Class.create();
Downloadable.FileUploader.prototype = {
    type : null,
    key : null, //key, identifier of uploader obj
    elmContainer : null, //insert Flex object and templates to elmContainer
    fileValueName : null, //name of field of JSON data of saved file
    fileValue : null,
    idName : null, //id name of elements for unique uploader
    uploaderText: uploaderTemplate,
    uploaderSyntax : /(^|.|\r|\n)(\[\[(\w+)\]\])/,
    uploaderObj : $H({}),
    config : null,
    initialize: function (type, key, elmContainer, fileValueName, fileValue ,idName, config) {
    	
        this.type = type;
        this.key = key;
        this.elmContainer = elmContainer;
        this.fileValueName = fileValueName;
        this.fileValue = fileValue;
        this.idName = idName;
        this.config = config;
        uploaderTemplate = new Template(this.uploaderText, this.uploaderSyntax);
        
        <?php if (true):?>
        
        
        Element.insert(
            elmContainer,
            {'top' : uploaderTemplate.evaluate({
                    'idName' : this.idName,
                    'fileValueName' : this.fileValueName,
                    'uploaderObj' : 'Downloadable.getUploaderObj(\''+this.type+'\', \''+this.key+'\')'
                })
            }
        );
        
        if ($(this.idName+'_save')) {
            if(typeof this.fileValue.toJSON != "undefined"){                
            	$(this.idName+'_save').value = this.fileValue.toJSON();
            }
        }
        Downloadable.setUploaderObj(
            this.type,
            this.key,
            new Flex.Uploader(this.idName, '<?php echo $this->getParentBlock()->getSkinUrl('media/uploaderSingle.swf') ?>', this.config)
        );
        
        if (varienGlobalEvents) {
            varienGlobalEvents.attachEventHandler('tabChangeBefore', Downloadable.getUploaderObj(type, key).onContainerHideBefore);
    	}
        //new Downloadable.FileList(this.idName, Downloadable.getUploaderObj(type, key));
        <?php endif;?>
    }
}

var optionDefaultInputType = 'radio';

// IE removes quotes from element.innerHTML whenever it thinks they're not needed, which breaks html.
var templateText =
        '<tr class="option-row">'+
<?php foreach ($this->getParentBlock()->getStores() as $_store): ?>
            '<td><input name="option[value][{{id}}][<?php echo $_store->getId() ?>]" value="{{store<?php echo $_store->getId() ?>}}" class="input-text<?php if($_store->getId()==0): ?> required-option<?php endif; ?>" type="text" <?php if ($this->getParentBlock()->getReadOnly()):?> disabled="disabled"<?php endif;?>/><\/td>'+
<?php endforeach; ?>
			'<td><input id="option_image_{{id}}_save" class="hidden" type="hidden" name="option[image][{{id}}]]" value=""/>'+
				'<div id="option_image_{{id}}" class="uploader" >'+
					'<div id="option_image_{{id}}-old" class="file-row-info"></div>'+
                    '<div id="option_image_{{id}}-new" class="file-row-info new-file"></div>'+
                    '<div id="option_image_{{id}}-upload" class="file-row-info"></div>'+
                    '<div class="buttons">'+
                        '<div id="option_image_{{id}}-install-flash" style="display:none">'+
                            '<?php echo $this->getParentBlock()->jsQuoteEscape(Mage::helper('media')->__('This content requires last version of Adobe Flash Player. <a href="%s">Get Flash</a>', 'http://www.adobe.com/go/getflash/')) ?>'+
                        '</div>'+
                    '</div>'+
                '</div>'+
            '<\/td>'+
            '<td><input class="input-text" type="checkbox" name="option[remove_image][{{id}}]]" value="1" /><\/td>'+
            '<td><input class="input-text" type="text" name="option[order][{{id}}]" value="{{sort_order}}" <?php if ($this->getParentBlock()->getReadOnly()):?> disabled="disabled"<?php endif;?>/><\/td>'+
            '<td class="a-center"><input class="input-radio" type="{{intype}}" name="default[]" value="{{id}}" {{checked}} <?php if ($this->getParentBlock()->getReadOnly()):?> disabled="disabled"<?php endif;?>/><\/td>'+
            '<td class="a-left">'+
                '<input type="hidden" class="delete-flag" name="option[delete][{{id}}]" value="" />'+
                <?php if (!$this->getParentBlock()->getReadOnly()):?>
                    '<?php echo $this->getParentBlock()->getDeleteButtonHtml() ?>'+
                <?php endif;?>
            '<\/td>'+
        '<\/tr>';

var attributeOption = {
    table : $('attribute-options-table'),
    templateSyntax : /(^|.|\r|\n)({{(\w+)}})/,
    templateText : templateText,
    fileListTemplate:fileListTemplate,
    listTemplate : null,
    itemCount : 0,
    totalItems : 0,
    itemsUsed:[],
    add : function(data) {

        var options_array = this.itemsUsed.indexOf(data.id);
        if ( options_array == '-1' )
        {
            this.template = new Template(this.templateText, this.templateSyntax);
            this.listTemplate = new Template(this.fileListTemplate, this.templateSyntax);
            if(!data.id){
                data = {};
                data.id  = 'option_'+this.itemCount;
            }
            if (!data.intype)
                data.intype = optionDefaultInputType;

            Element.insert(this.table, {after: this.template.evaluate(data)});
            this.bindRemoveButtons();
            var itemCount = this.itemCount;

            if (!data.image_info) {
                data.image_info = [];
            }else{

                $('option_image_' + data.id + '-old').innerHTML = this.listTemplate.evaluate(data.image_info[0]);
            }
            $('option_image_' + data.id + '-new').hide();
            $('option_image_' + data.id + '-old').show();

            new Downloadable.FileUploader(
                'option_image',
                'option_image_'+itemCount,
                $('option_image_'+data.id+'').up('td'),
                'option[image]['+data.id+']',
                data.image_info,
                'option_image_'+data.id+'',
                <?php echo $json_config ?>
            );

            this.itemCount++;
            this.totalItems++;
            this.updateItemsCountField();

            this.itemsUsed.push(data.id);
        }
    },
    remove : function(event){
        var element = $(Event.findElement(event, 'tr')); // !!! Button already
                                                               // have table parent in safari
        // Safari workaround
        element.ancestors().each(function(parentItem){
           if (parentItem.hasClassName('option-row')) {
               element = parentItem;
               throw $break;
           } else if (parentItem.hasClassName('box')) {
               throw $break;
           }
        });


        if(element){
            var elementFlags = element.getElementsByClassName('delete-flag');
            if(elementFlags[0]){
                elementFlags[0].value=1;
            }

            element.addClassName('no-display');
            element.addClassName('template');
            element.hide();
            this.totalItems--;
            this.updateItemsCountField();
        }
    },
    updateItemsCountField: function() {
        if (this.totalItems > 0) {
            $('option-count-check').value = '1';
        } else {
            $('option-count-check').value = '';
        }
    },
    bindRemoveButtons : function(){
        var buttons = $$('.delete-option');
        for(var i=0;i<buttons.length;i++){
            if(!$(buttons[i]).binded){
                $(buttons[i]).binded = true;
                Event.observe(buttons[i], 'click', this.remove.bind(this));
            }
        }
    }

};

//]]>
</script>